// Code generated by MockGen. DO NOT EDIT.
// Source: expense.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_expense.go -package=repository -source=expense.go
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/petlog/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockExpenseRepository is a mock of ExpenseRepository interface.
type MockExpenseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseRepositoryMockRecorder
	isgomock struct{}
}

// MockExpenseRepositoryMockRecorder is the mock recorder for MockExpenseRepository.
type MockExpenseRepositoryMockRecorder struct {
	mock *MockExpenseRepository
}

// NewMockExpenseRepository creates a new mock instance.
func NewMockExpenseRepository(ctrl *gomock.Controller) *MockExpenseRepository {
	mock := &MockExpenseRepository{ctrl: ctrl}
	mock.recorder = &MockExpenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseRepository) EXPECT() *MockExpenseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExpenseRepository) Create(c context.Context, expense *model.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExpenseRepositoryMockRecorder) Create(c, expense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExpenseRepository)(nil).Create), c, expense)
}

// Delete mocks base method.
func (m *MockExpenseRepository) Delete(c context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExpenseRepositoryMockRecorder) Delete(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpenseRepository)(nil).Delete), c, id)
}

// FindAll mocks base method.
func (m *MockExpenseRepository) FindAll(c context.Context, opts ...ExpenseQueryOption) ([]*model.Expense, int, error) {
	m.ctrl.T.Helper()
	varargs := []any{c}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAll", varargs...)
	ret0, _ := ret[0].([]*model.Expense)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockExpenseRepositoryMockRecorder) FindAll(c any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{c}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockExpenseRepository)(nil).FindAll), varargs...)
}

// FindByID mocks base method.
func (m *MockExpenseRepository) FindByID(c context.Context, id string) (*model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", c, id)
	ret0, _ := ret[0].(*model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockExpenseRepositoryMockRecorder) FindByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockExpenseRepository)(nil).FindByID), c, id)
}

// Update mocks base method.
func (m *MockExpenseRepository) Update(c context.Context, expense *model.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockExpenseRepositoryMockRecorder) Update(c, expense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExpenseRepository)(nil).Update), c, expense)
}
