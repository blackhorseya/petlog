// Code generated by MockGen. DO NOT EDIT.
// Source: pet.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_pet.go -package=repository -source=pet.go
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/petlog/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPetRepository is a mock of PetRepository interface.
type MockPetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPetRepositoryMockRecorder
	isgomock struct{}
}

// MockPetRepositoryMockRecorder is the mock recorder for MockPetRepository.
type MockPetRepositoryMockRecorder struct {
	mock *MockPetRepository
}

// NewMockPetRepository creates a new mock instance.
func NewMockPetRepository(ctrl *gomock.Controller) *MockPetRepository {
	mock := &MockPetRepository{ctrl: ctrl}
	mock.recorder = &MockPetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetRepository) EXPECT() *MockPetRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPetRepository) Create(c context.Context, pet *model.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, pet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPetRepositoryMockRecorder) Create(c, pet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPetRepository)(nil).Create), c, pet)
}

// Delete mocks base method.
func (m *MockPetRepository) Delete(c context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPetRepositoryMockRecorder) Delete(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPetRepository)(nil).Delete), c, id)
}

// FindByID mocks base method.
func (m *MockPetRepository) FindByID(c context.Context, id string) (*model.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", c, id)
	ret0, _ := ret[0].(*model.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPetRepositoryMockRecorder) FindByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPetRepository)(nil).FindByID), c, id)
}

// FindByOwnerID mocks base method.
func (m *MockPetRepository) FindByOwnerID(c context.Context, ownerID string) ([]*model.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOwnerID", c, ownerID)
	ret0, _ := ret[0].([]*model.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOwnerID indicates an expected call of FindByOwnerID.
func (mr *MockPetRepositoryMockRecorder) FindByOwnerID(c, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOwnerID", reflect.TypeOf((*MockPetRepository)(nil).FindByOwnerID), c, ownerID)
}

// Update mocks base method.
func (m *MockPetRepository) Update(c context.Context, pet *model.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, pet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPetRepositoryMockRecorder) Update(c, pet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPetRepository)(nil).Update), c, pet)
}
