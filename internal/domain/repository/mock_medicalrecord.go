// Code generated by MockGen. DO NOT EDIT.
// Source: medicalrecord.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_medicalrecord.go -package=repository -source=medicalrecord.go
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/blackhorseya/petlog/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockMedicalRecordRepository is a mock of MedicalRecordRepository interface.
type MockMedicalRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMedicalRecordRepositoryMockRecorder
	isgomock struct{}
}

// MockMedicalRecordRepositoryMockRecorder is the mock recorder for MockMedicalRecordRepository.
type MockMedicalRecordRepositoryMockRecorder struct {
	mock *MockMedicalRecordRepository
}

// NewMockMedicalRecordRepository creates a new mock instance.
func NewMockMedicalRecordRepository(ctrl *gomock.Controller) *MockMedicalRecordRepository {
	mock := &MockMedicalRecordRepository{ctrl: ctrl}
	mock.recorder = &MockMedicalRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMedicalRecordRepository) EXPECT() *MockMedicalRecordRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMedicalRecordRepository) Create(c context.Context, record *model.MedicalRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMedicalRecordRepositoryMockRecorder) Create(c, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMedicalRecordRepository)(nil).Create), c, record)
}

// Delete mocks base method.
func (m *MockMedicalRecordRepository) Delete(c context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMedicalRecordRepositoryMockRecorder) Delete(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMedicalRecordRepository)(nil).Delete), c, id)
}

// FindByID mocks base method.
func (m *MockMedicalRecordRepository) FindByID(c context.Context, id string) (*model.MedicalRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", c, id)
	ret0, _ := ret[0].(*model.MedicalRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockMedicalRecordRepositoryMockRecorder) FindByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMedicalRecordRepository)(nil).FindByID), c, id)
}

// FindByPetID mocks base method.
func (m *MockMedicalRecordRepository) FindByPetID(c context.Context, petID string, startDate, endDate time.Time) ([]*model.MedicalRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPetID", c, petID, startDate, endDate)
	ret0, _ := ret[0].([]*model.MedicalRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPetID indicates an expected call of FindByPetID.
func (mr *MockMedicalRecordRepositoryMockRecorder) FindByPetID(c, petID, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPetID", reflect.TypeOf((*MockMedicalRecordRepository)(nil).FindByPetID), c, petID, startDate, endDate)
}

// Update mocks base method.
func (m *MockMedicalRecordRepository) Update(c context.Context, record *model.MedicalRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMedicalRecordRepositoryMockRecorder) Update(c, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMedicalRecordRepository)(nil).Update), c, record)
}
