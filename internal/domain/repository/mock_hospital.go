// Code generated by MockGen. DO NOT EDIT.
// Source: hospital.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_hospital.go -package=repository -source=hospital.go
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/petlog/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockHospitalRepository is a mock of HospitalRepository interface.
type MockHospitalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHospitalRepositoryMockRecorder
	isgomock struct{}
}

// MockHospitalRepositoryMockRecorder is the mock recorder for MockHospitalRepository.
type MockHospitalRepositoryMockRecorder struct {
	mock *MockHospitalRepository
}

// NewMockHospitalRepository creates a new mock instance.
func NewMockHospitalRepository(ctrl *gomock.Controller) *MockHospitalRepository {
	mock := &MockHospitalRepository{ctrl: ctrl}
	mock.recorder = &MockHospitalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHospitalRepository) EXPECT() *MockHospitalRepositoryMockRecorder {
	return m.recorder
}

// CountByStatus mocks base method.
func (m *MockHospitalRepository) CountByStatus(c context.Context) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByStatus", c)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByStatus indicates an expected call of CountByStatus.
func (mr *MockHospitalRepositoryMockRecorder) CountByStatus(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByStatus", reflect.TypeOf((*MockHospitalRepository)(nil).CountByStatus), c)
}

// Create mocks base method.
func (m *MockHospitalRepository) Create(c context.Context, hospital *model.Hospital) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, hospital)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHospitalRepositoryMockRecorder) Create(c, hospital any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHospitalRepository)(nil).Create), c, hospital)
}

// Delete mocks base method.
func (m *MockHospitalRepository) Delete(c context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHospitalRepositoryMockRecorder) Delete(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHospitalRepository)(nil).Delete), c, id)
}

// GetByID mocks base method.
func (m *MockHospitalRepository) GetByID(c context.Context, id string) (*model.Hospital, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c, id)
	ret0, _ := ret[0].(*model.Hospital)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockHospitalRepositoryMockRecorder) GetByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockHospitalRepository)(nil).GetByID), c, id)
}

// GetByLicenseNo mocks base method.
func (m *MockHospitalRepository) GetByLicenseNo(c context.Context, licenseNo string) (*model.Hospital, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLicenseNo", c, licenseNo)
	ret0, _ := ret[0].(*model.Hospital)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLicenseNo indicates an expected call of GetByLicenseNo.
func (mr *MockHospitalRepositoryMockRecorder) GetByLicenseNo(c, licenseNo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLicenseNo", reflect.TypeOf((*MockHospitalRepository)(nil).GetByLicenseNo), c, licenseNo)
}

// GetByPhone mocks base method.
func (m *MockHospitalRepository) GetByPhone(c context.Context, phone string) (*model.Hospital, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhone", c, phone)
	ret0, _ := ret[0].(*model.Hospital)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhone indicates an expected call of GetByPhone.
func (mr *MockHospitalRepositoryMockRecorder) GetByPhone(c, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhone", reflect.TypeOf((*MockHospitalRepository)(nil).GetByPhone), c, phone)
}

// GetNearby mocks base method.
func (m *MockHospitalRepository) GetNearby(c context.Context, opts ...NearbyOption) ([]*model.Hospital, error) {
	m.ctrl.T.Helper()
	varargs := []any{c}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNearby", varargs...)
	ret0, _ := ret[0].([]*model.Hospital)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearby indicates an expected call of GetNearby.
func (mr *MockHospitalRepositoryMockRecorder) GetNearby(c any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{c}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearby", reflect.TypeOf((*MockHospitalRepository)(nil).GetNearby), varargs...)
}

// Search mocks base method.
func (m *MockHospitalRepository) Search(c context.Context, opts ...SearchOption) (*SearchResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{c}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockHospitalRepositoryMockRecorder) Search(c any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{c}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockHospitalRepository)(nil).Search), varargs...)
}

// Update mocks base method.
func (m *MockHospitalRepository) Update(c context.Context, hospital *model.Hospital) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, hospital)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockHospitalRepositoryMockRecorder) Update(c, hospital any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHospitalRepository)(nil).Update), c, hospital)
}
