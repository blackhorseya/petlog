// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/blackhorseya/petlog/internal/config"
	"github.com/blackhorseya/petlog/internal/endpoint"
	"github.com/blackhorseya/petlog/internal/infra/mongodb"
	"github.com/blackhorseya/petlog/internal/transport/gin"
	"github.com/blackhorseya/petlog/internal/usecase/command"
	"github.com/blackhorseya/petlog/internal/usecase/query"
	http2 "github.com/go-kit/kit/transport/http"
	"net/http"
)

import (
	_ "github.com/blackhorseya/petlog/api"
)

// Injectors from wire.go:

// initPetAPI initializes the pet API.
func initPetAPI(c context.Context, cfg config.Config) (http.Handler, func(), error) {
	engine := gin.NewGinEngine()
	database, cleanup, err := mongodb.NewDatabase(cfg)
	if err != nil {
		return nil, nil, err
	}
	petRepository := mongodb.NewPetMongoRepo(database)
	createPetHandler := command.NewCreatePetHandler(petRepository)
	updatePetHandler := command.NewUpdatePetHandler(petRepository)
	deletePetHandler := command.NewDeletePetHandler(petRepository)
	getPetByIDHandler := query.NewGetPetByIDHandler(petRepository)
	listPetsByOwnerHandler := query.NewListPetsByOwnerHandler(petRepository)
	petEndpoints := endpoint.MakePetEndpoints(createPetHandler, updatePetHandler, deletePetHandler, getPetByIDHandler, listPetsByOwnerHandler)
	healthLogRepository, err := mongodb.NewHealthLogRepository(database)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	createHealthLogHandler := command.NewCreateHealthLogHandler(healthLogRepository)
	updateHealthLogHandler := command.NewUpdateHealthLogHandler(healthLogRepository)
	deleteHealthLogHandler := command.NewDeleteHealthLogHandler(healthLogRepository)
	getHealthLogByIDHandler := query.NewGetHealthLogByIDHandler(healthLogRepository)
	listHealthLogsByPetHandler := query.NewListHealthLogsByPetHandler(healthLogRepository)
	healthLogEndpoints := endpoint.ProvideHealthLogEndpoints(createHealthLogHandler, updateHealthLogHandler, deleteHealthLogHandler, getHealthLogByIDHandler, listHealthLogsByPetHandler)
	getDashboardOverviewHandler := query.NewGetDashboardOverviewHandler(petRepository, healthLogRepository)
	dashboardEndpoints := endpoint.NewDashboardEndpoints(getDashboardOverviewHandler)
	medicalRecordRepository, err := mongodb.NewMedicalRecordRepository(database)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	createMedicalRecordHandler := command.NewCreateMedicalRecordHandler(medicalRecordRepository)
	updateMedicalRecordHandler := command.NewUpdateMedicalRecordHandler(medicalRecordRepository)
	deleteMedicalRecordHandler := command.NewDeleteMedicalRecordHandler(medicalRecordRepository)
	getMedicalRecordByIDHandler := query.NewGetMedicalRecordByIDHandler(medicalRecordRepository)
	listMedicalRecordsByPetHandler := query.NewListMedicalRecordsByPetHandler(medicalRecordRepository)
	medicalRecordEndpoints := endpoint.MakeMedicalRecordEndpoints(createMedicalRecordHandler, updateMedicalRecordHandler, deleteMedicalRecordHandler, getMedicalRecordByIDHandler, listMedicalRecordsByPetHandler)
	expenseRepository := mongodb.NewExpenseRepository(database)
	createExpenseHandler := command.NewCreateExpenseHandler(expenseRepository, petRepository)
	updateExpenseHandler := command.NewUpdateExpenseHandler(expenseRepository)
	deleteExpenseHandler := command.NewDeleteExpenseHandler(expenseRepository)
	getExpenseByIDHandler := query.NewGetExpenseByIDHandler(expenseRepository)
	listExpensesByPetHandler := query.NewListExpensesByPetHandler(expenseRepository)
	getExpenseSummaryHandler := query.NewGetExpenseSummaryHandler(expenseRepository)
	expenseEndpoints := endpoint.MakeExpenseEndpoints(createExpenseHandler, updateExpenseHandler, deleteExpenseHandler, getExpenseByIDHandler, listExpensesByPetHandler, getExpenseSummaryHandler)
	hospitalRepository := mongodb.NewHospitalRepository(database)
	searchHospitalsHandler := query.NewSearchHospitalsHandler(hospitalRepository)
	getHospitalDetailHandler := query.NewGetHospitalDetailHandler(hospitalRepository)
	listNearbyHospitalsHandler := query.NewListNearbyHospitalsHandler(hospitalRepository)
	hospitalEndpoints := endpoint.MakeHospitalEndpoints(searchHospitalsHandler, getHospitalDetailHandler, listNearbyHospitalsHandler)
	v := _wireValue
	handler := gin.NewHTTPHandler(engine, cfg, petEndpoints, healthLogEndpoints, dashboardEndpoints, medicalRecordEndpoints, expenseEndpoints, hospitalEndpoints, v)
	return handler, func() {
		cleanup()
	}, nil
}

var (
	_wireValue = []http2.ServerOption{}
)
