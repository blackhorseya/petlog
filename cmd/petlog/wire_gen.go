// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/blackhorseya/petlog/internal/config"
	"github.com/blackhorseya/petlog/internal/endpoint"
	"github.com/blackhorseya/petlog/internal/infra/mongodb"
	"github.com/blackhorseya/petlog/internal/transport/gin"
	"github.com/blackhorseya/petlog/internal/usecase/command"
	"github.com/blackhorseya/petlog/internal/usecase/query"
	http2 "github.com/go-kit/kit/transport/http"
	"go.mongodb.org/mongo-driver/v2/mongo"
	"net/http"
)

// Injectors from wire.go:

// initPetAPI initializes the pet API.
func initPetAPI(c context.Context, cfg config.AppConfig) (http.Handler, error) {
	database, err := provideMongoDatabase(cfg)
	if err != nil {
		return nil, err
	}
	petRepository := mongodb.NewPetMongoRepo(database)
	createPetHandler := command.NewCreatePetHandler(petRepository)
	updatePetHandler := command.NewUpdatePetHandler(petRepository)
	deletePetHandler := command.NewDeletePetHandler(petRepository)
	getPetByIDHandler := query.NewGetPetByIDHandler(petRepository)
	listPetsByOwnerHandler := query.NewListPetsByOwnerHandler(petRepository)
	petEndpoints := endpoint.MakePetEndpoints(createPetHandler, updatePetHandler, deletePetHandler, getPetByIDHandler, listPetsByOwnerHandler)
	v := _wireValue
	handler := gin.NewPetHandler(cfg, petEndpoints, v...)
	return handler, nil
}

var (
	_wireValue = []http2.ServerOption{}
)

// wire.go:

func provideMongoDatabase(cfg config.AppConfig) (*mongo.Database, error) {

	return nil, nil
}
