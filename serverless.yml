# "org" 確保此服務與正確的 Serverless Framework Access Key 一起使用。
org: blackhorseya
# "app" 啟用 Serverless Framework Dashboard 功能並與其他服務共享。
app: petlog
# "service" 是此專案的名稱，也會被加入到您的 AWS 資源名稱中。
service: petlog

frameworkVersion: "4"

useDotenv: true

plugins:
  - serverless-go-plugin
  - serverless-dotenv-plugin

custom:
  go:
    # go.mod 檔案所在的資料夾
    baseDir: .
    # 編譯後二進位檔的目標資料夾
    binDir: bin
    # CGO_ENABLED 旗標
    cgo: 0
    # 編譯指令
    cmd: 'GOOS=linux GOARCH=amd64 go build -ldflags="-s -w"'
    # 如果為 true，則在每個目錄中建立函式（適用於 monorepo）
    monorepo: false
    # 只有當 runtime 在此處宣告時，外掛程式才會編譯函式
    supportedRuntimes: ["provided.al2"]
    # 如果為 true，則將提供的 runtime 函式建立為單一的 "bootstrap" 二進位檔
    buildProvidedRuntimeAsBootstrap: true
  dotenv:
    logging: true

provider:
  name: aws
  # 建議使用 provided，這是目前 Go 在 Lambda 上的標準執行環境
  runtime: provided.al2
  region: ap-northeast-1 # 請根據您的需求修改區域
  stage: ${opt:stage, 'int'}
  environment:
    MONGO_URI: ${env:MONGO_URI}
    MONGO_DATABASE: ${env:MONGO_DATABASE}
    AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
    AUTH0_AUDIENCE: ${env:AUTH0_AUDIENCE}
  # httpApi:
  #   cors: true

package:
  individually: true
  # 我們會將編譯好的 Go 執行檔打包成 .build/app.zip
  # serverless-go-plugin 會處理打包，所以我們不需要手動指定 artifact

functions:
  api:
    # 指向包含 main.go 的套件目錄
    handler: ./cmd/petlog
    events:
      - httpApi:
          method: "*"
          # {proxy+} 會捕獲所有請求路徑，並交由 Gin 應用程式處理
          path: /{proxy+}
    # 可選：從檔案載入環境變數
    # environment: ${file(./configs/${self:provider.stage}.yaml)}
