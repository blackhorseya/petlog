{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "建立 Hospital 領域模型與倉儲介面",
        "description": "在 Domain 層建立 Hospital 實體模型及相關倉儲介面，遵循 Clean Architecture 原則",
        "details": "在 internal/domain/model/ 建立 hospital.go，定義 Hospital struct 包含 ID、Name、Address、Phone、County、Veterinarian、LicenseType、Status、Coordinates (lat/lng)、CreatedAt、UpdatedAt 等欄位，僅使用 json tag。在 internal/domain/repository/ 建立 hospital.go 介面，定義 SearchHospitals、GetHospitalByID、ListHospitalsByArea、GetNearbyHospitals 等方法。使用 //go:generate mockgen 產生 mock 檔案。",
        "testStrategy": "為 Hospital 模型撰寫單元測試，驗證結構體欄位與 JSON 序列化。為倉儲介面產生 mock，確保介面方法定義正確。",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "實作 MongoDB Hospital 倉儲層",
        "description": "在 Infrastructure 層實作 Hospital 的 MongoDB 持久化邏輯",
        "details": "在 internal/infra/mongodb/ 建立 hospital_repository_model.go 定義資料庫模型（包含 bson tag），以及 toDomain/fromDomain 轉換方法。建立 hospital_repository_impl.go 實作 HospitalRepository 介面，包含地理查詢功能使用 MongoDB 的 $near 操作符。建立適當的索引支援地理查詢和文字搜尋。",
        "testStrategy": "撰寫倉儲實作的整合測試，使用 testcontainer 或 in-memory MongoDB。測試地理查詢、關鍵字搜尋、分頁功能。驗證 toDomain/fromDomain 轉換的正確性。",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "建立醫院資料匯入腳本",
        "description": "建立腳本將 output/hospitals.json 資料匯入到 MongoDB，並處理地址轉座標",
        "details": "建立 cmd/import-hospitals/ 目錄，撰寫匯入腳本讀取 output/hospitals.json。使用免費的 Nominatim API 或政府開放資料 API 將地址轉換為 GPS 座標。實作批次處理避免 API 限制，加入錯誤重試機制。產生匯入報告顯示成功/失敗統計。建立適當的 MongoDB 索引支援查詢效能。",
        "testStrategy": "撰寫匯入腳本的單元測試，模擬 JSON 檔案讀取和 API 呼叫。測試錯誤處理和重試邏輯。驗證座標轉換的準確性和資料完整性。",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "實作醫院搜尋與查詢 Usecase",
        "description": "在 Usecase 層實作醫院相關的業務邏輯處理",
        "details": "在 internal/usecase/query/ 建立 search_hospitals_handler.go 實作關鍵字搜尋（名稱、地址、獸醫師）和地理範圍搜尋。建立 get_hospital_detail_handler.go 取得單一醫院詳細資訊。建立 list_nearby_hospitals_handler.go 根據使用者位置搜尋附近醫院。加入分頁、排序、篩選功能。實作保險絲機制控制外部 API 使用量。",
        "testStrategy": "為每個 handler 撰寫單元測試，使用 mock repository。測試不同搜尋條件的組合，驗證分頁邏輯。測試保險絲機制在不同成本限制下的行為。",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "建立醫院 API Endpoints",
        "description": "在 Endpoint 層實作醫院相關的 HTTP 端點",
        "details": "在 internal/endpoint/ 建立 hospital_endpoint.go，實作 GET /api/hospitals（搜尋/列表）、GET /api/hospitals/{id}（詳情）、GET /api/hospitals/nearby（附近醫院）端點。處理 DTO 與領域模型轉換，實作請求驗證和錯誤處理。加入 Swagger 文件註解。支援查詢參數如 keyword、lat、lng、radius、limit、offset。",
        "testStrategy": "撰寫端點的單元測試，驗證請求/回應格式。測試參數驗證和錯誤處理。使用 testify 驗證不同場景下的回應內容。",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "實作醫院 HTTP Transport 層",
        "description": "在 Transport 層建立醫院相關的 Gin HTTP 處理器",
        "details": "在 internal/transport/gin/ 建立 hospital_handler.go，實作 HTTP 請求處理邏輯。處理 HTTP 協議轉換、請求解析、回應格式化。在 router.go 中註冊醫院相關路由。實作適當的 middleware 如 CORS、認證檢查。加入請求記錄和錯誤追蹤。",
        "testStrategy": "撰寫 HTTP handler 的整合測試，使用 httptest 模擬請求。測試各種 HTTP 狀態碼回應。驗證 JSON 回應格式的正確性。",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "建立前端醫院 API 客戶端",
        "description": "在前端建立呼叫醫院 API 的統一介面",
        "details": "在 web/src/lib/api/ 建立 hospital.ts，使用現有的 axios 設定實作醫院 API 呼叫方法。實作 searchHospitals、getHospitalById、getNearbyHospitals 函數。加入 TypeScript 型別定義確保型別安全。整合 Auth0 token 自動帶入。實作前端快取策略減少 API 呼叫。",
        "testStrategy": "撰寫 API 客戶端的單元測試，模擊 axios 回應。測試錯誤處理和重試邏輯。驗證 TypeScript 型別定義的正確性。",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "整合 Leaflet 地圖元件",
        "description": "建立基於 Leaflet 和 OpenStreetMap 的地圖顯示元件",
        "details": "安裝 leaflet 和 react-leaflet 套件。在 web/src/components/hospitals/ 建立 HospitalMap.tsx 元件，使用 OpenStreetMap 作為底圖。實作醫院標記顯示、點擊彈出視窗顯示基本資訊。加入使用者定位功能和縮放控制。實作響應式設計支援行動裝置。處理地圖載入狀態和錯誤處理。",
        "testStrategy": "撰寫地圖元件的單元測試，模擬 leaflet 行為。測試標記顯示和互動功能。使用 React Testing Library 驗證元件渲染。",
        "priority": "high",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "建立醫院列表與搜尋元件",
        "description": "實作醫院列表檢視和搜尋功能元件",
        "details": "在 web/src/components/hospitals/ 建立 HospitalList.tsx、HospitalSearch.tsx、HospitalCard.tsx 元件。實作關鍵字搜尋、地區篩選、排序功能。使用 TanStack Query 管理狀態和快取。實作無限滾動或分頁載入。加入載入狀態和空白狀態處理。遵循 Shadcn UI 設計系統。",
        "testStrategy": "撰寫列表和搜尋元件的單元測試。測試搜尋、篩選、排序功能。驗證無限滾動或分頁邏輯。測試載入和錯誤狀態處理。",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "建立醫院主頁面與詳情頁",
        "description": "實作醫院地圖功能的主要頁面結構",
        "details": "建立 web/src/app/hospitals/page.tsx 主頁面，整合地圖和列表檢視切換功能。建立 web/src/app/hospitals/[id]/page.tsx 詳情頁顯示完整醫院資訊。實作頁面間的導航和狀態管理。加入 SEO 最佳化和 meta tags。實作麵包屑導航和返回功能。整合 Google Maps 導航連結。",
        "testStrategy": "撰寫頁面元件的整合測試。測試路由導航和參數傳遞。驗證 SEO meta tags 和結構化資料。測試響應式布局在不同螢幕尺寸下的表現。",
        "priority": "medium",
        "dependencies": [
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "實作保險絲機制與成本控制",
        "description": "建立 API 使用量監控和降級保護機制",
        "details": "建立成本監控服務追蹤外部 API 使用量。實作保險絲機制：正常模式（完整功能）、警戒模式（80%，停用次要功能）、限制模式（90%，僅提供必要欄位）、安全模式（95%+，僅使用本地資料）。在前端實作降級 UI 顯示和 Google Maps 導航連結備援。建立管理介面監控和調整閾值。",
        "testStrategy": "撰寫保險絲機制的單元測試，模擬不同使用量情境。測試自動降級和恢復邏輯。驗證前端降級 UI 的正確顯示。測試管理介面的功能。",
        "priority": "high",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "優化效能與整合測試",
        "description": "實作快取策略、效能優化並進行端到端測試",
        "details": "實作前端 Service Worker 快取地圖圖磚和醫院資料。後端實作 Redis 快取熱門搜尋結果。建立 MongoDB 複合索引優化查詢效能。實作圖片懶載入和虛擬滾動優化大量資料顯示。撰寫端到端測試涵蓋完整使用者流程。進行效能測試確保 30 秒內完成醫院查找。建立監控和 alerting 機制。",
        "testStrategy": "使用 Lighthouse 進行效能測試。撰寫 E2E 測試使用 Playwright 或 Cypress。進行負載測試驗證 API 效能。測試快取機制的有效性和過期邏輯。",
        "priority": "medium",
        "dependencies": [
          10,
          11
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-19T07:47:52.925Z",
      "updated": "2025-09-19T07:47:52.925Z",
      "description": "Tasks for master context"
    }
  }
}